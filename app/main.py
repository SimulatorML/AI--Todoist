"""Main Telegram bot application with async support."""

import os
import logging
import asyncio
from dotenv import load_dotenv
from telebot.async_telebot import AsyncTeleBot
from telebot import types
import re

from .todoist_client import TodoistClient
from .models import TodoistTask, BotResponse
from .database import user_storage

# Load environment variables
load_dotenv()

token_regex = re.compile('^[a-z\\d]{40}$')

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Initialize bot
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

bot = AsyncTeleBot(TELEGRAM_BOT_TOKEN)


@bot.message_handler(commands=['start'])
async def start_command(message):
    """Handle /start command."""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Todoist –ë–æ—Ç!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Todoist –ø—Ä—è–º–æ –∏–∑ Telegram.

<b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</b>:
1. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω Todoist –∑–¥–µ—Å—å: https://todoist.com/prefs/integrations
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨`
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É!

<b>–ö–æ–º–∞–Ω–¥—ã</b>:
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
‚Ä¢ /help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å

–ü—Ä–∏–º–µ—Ä: "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ" ‚Üí –°–æ–∑–¥–∞—Å—Ç –∑–∞–¥–∞—á—É "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ" –≤ –≤–∞—à–∏—Ö –í—Ö–æ–¥—è—â–∏—Ö
    """
    await bot.reply_to(message, welcome_text, parse_mode='HTML')


@bot.message_handler(commands=['help'])
async def help_command(message):
    """Handle /help command."""
    help_text = """
ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Todoist –ë–æ—Ç—É</b>

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞</b>:
1. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω Todoist –∑–¥–µ—Å—å: https://todoist.com/prefs/integrations
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: `–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨`

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b>:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
‚Ä¢ –ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –≤–∞—à–∏—Ö –í—Ö–æ–¥—è—â–∏—Ö —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 3
‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ–π

<b>–ü—Ä–∏–º–µ—Ä—ã</b>:
‚Ä¢ "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã" ‚Üí –ó–∞–¥–∞—á–∞: "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –∑–∞–≤—Ç—Ä–∞" ‚Üí –ó–∞–¥–∞—á–∞: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –∑–∞–≤—Ç—Ä–∞"
‚Ä¢ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é" ‚Üí –ó–∞–¥–∞—á–∞: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"

<b>–ö–æ–º–∞–Ω–¥—ã</b>:
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
‚Ä¢ /help - –≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>:
‚Ä¢ ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚Ä¢ ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    """
    await bot.reply_to(message, help_text, parse_mode='HTML')


@bot.message_handler(func=lambda message: True)
async def handle_message(message):
    """Handle all text messages and create Todoist tasks."""
    user_id = message.from_user.id
    message_text = message.text

    if token_regex.search(message_text):
        # Validate token by testing API connection
        try:
            todoist_client = TodoistClient(message_text)
            await todoist_client.get_projects()  # Test API connection

            # Store token
            await user_storage.store_token(user_id, message_text)
            await bot.reply_to(
                message, "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Todoist."
            )
            return

        except Exception as e:
            await bot.reply_to(
                message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

    # Check if user has token
    if not await user_storage.has_token(user_id):
        await bot.reply_to(
            message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω Todoist!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ: `–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨`\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å: https://todoist.com/prefs/integrations",
            parse_mode='Markdown')
        return

    # Get user's token
    todoist_token = await user_storage.get_token(user_id)
    if not todoist_token:
        await bot.reply_to(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ"
        )
        return

    # Send "creating task" notification
    creating_msg = await bot.reply_to(message, "‚è≥ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É...")

    try:
        # Create Todoist client
        todoist_client = TodoistClient(todoist_token)

        # Create task with idempotency using Telegram message_id
        task = TodoistTask(content=message_text,
                           priority=3,
                           request_id=f"tg_{user_id}_{message.message_id}")

        # Create task in Todoist
        task_response = await todoist_client.create_task(task)

        # Send success confirmation
        success_text = (
            f"‚úÖ **–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            f"üìù **–ó–∞–¥–∞—á–∞:** {task_response.content}\n"
            f"üìÅ **–ú–µ—Å—Ç–æ:** –í—Ö–æ–¥—è—â–∏–µ\n"
            f"‚≠ê **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** P{task_response.priority}\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Todoist]({task_response.url})")

        await bot.edit_message_text(success_text,
                                    creating_msg.chat.id,
                                    creating_msg.message_id,
                                    parse_mode='Markdown')

        logger.info(f"Task created for user {user_id}: {message_text}")

    except ValueError as e:
        # Handle known API errors
        await bot.edit_message_text(f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:**\n{str(e)}",
                                    creating_msg.chat.id,
                                    creating_msg.message_id,
                                    parse_mode='Markdown')
        logger.error(f"Error creating task for user {user_id}: {e}")

    except Exception as e:
        # Handle unexpected errors
        await bot.edit_message_text(
            "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            creating_msg.chat.id,
            creating_msg.message_id,
            parse_mode='Markdown')
        logger.error(f"Unexpected error for user {user_id}: {e}")


async def main():
    """Main async function to run the bot."""
    logger.info("Starting Todoist Telegram Bot...")

    try:
        await bot.polling(non_stop=True)
    except Exception as e:
        logger.error(f"Bot polling error: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
